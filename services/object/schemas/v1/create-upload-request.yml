$schema: "/schemas/common/metaschema.json#"
title:              "Create Upload Request"
description: |
  A request to begin an upload, containing proposed upload methods to which the
  server may agree to or reject.
type:               object
properties:
  projectId:
    title:          "Project Identifier"
    description: |
      Project identifier.
    type:           string
    minLength:      {$const: projectId-min-length}
    maxLength:      {$const: projectId-max-length}
    pattern:        {$const: projectId-pattern}
  uploadId:
    title: "Upload ID"
    description: |-
      Unique identifier for this upload.   Once an object is created with an uploadId,
      uploads of the same object with different uploadIds will be rejected.  Callers
      should pass a randomly-generated slugid here.
    type:             string
    pattern:          {$const: slugid-pattern}
  expires:
    title:          "Expiration"
    description: |
      Date at which this entry expires from the object table.  The expiration cannot
      be changed in subsequent calls to the same method.
    type:           string
    format:         date-time
  hashes:
    title: "Object Content Hashes"
    description: |
      Hashes of the content of this object.  These values will be verified by
      well-behaved downloaders.  The format is `{alogrithm: value}`.  Multiple
      calls to `createUpload` for the same object can specify additional hashes,
      but existing hashes cannot be changed; this allows "amending" an upload
      with hashes after the data has been transferred, for example.  Omitting
      this property is the same as specifying `hashes: {}`.
    type: object
    properties:
      # NOTE: adding new hash algorithms here is fine, but it is important that this list
      # be finite, to avoid adding a huge number of "hashes "to an object.  Do not remove
      # algorithms from the list, even if they are known to be insecure, as existing
      # clients may still produce objects with such hashes.
      sha256:
        type: string
        pattern: '^[a-z0-9]{64}$'
      sha512:
        type: string
        pattern: '^[a-z0-9]{128}$'
    required: []
    additionalProperties: false

  proposedUploadMethods:
    type: object
    title: "Proposed Upload Methods"
    description: |
      Upload methods, with details, that the caller is prepared to execute.  If
      this object is empty, then the server will reject the request but still
      create the upload with the given `uploadId`, `projectId`, and `expires`,
      so any subsequent calls must share those values.  The server may choose
      any of the proposed methods at its discretion.
    properties:
      dataInline: {$ref: "upload-method-data-inline.json#/definitions/request"}
      putUrl: {$ref: "upload-method-put-url.json#/definitions/request"}
    additionalProperties: false
    required: []
additionalProperties: false
required:
  - projectId
  - uploadId
  - expires
  - proposedUploadMethods
